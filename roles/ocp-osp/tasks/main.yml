---
# tasks file for jritenour.ocp-osp
#  - name: Generate  UUID
#    shell: openssl rand -hex 2
#    register: uuid_list
#  - name: Debugging instance info
#    debug:
#      var: uuid_list.stdout

#the below should be re-written to use an array loop for volumes and instances


# Moved to ocp-quick
#  - name: Create volume for cluster docker registry
#    os_volume:
#      verify: no
#      auth: "{{ os_auth | default(omit) }}"
#      state: present
#      availability_zone: "{{ az }}"
#      size: "{{ openshift_registry_volume_size }}"
#      display_name: "{{ registry_vol_name }}"
#    register: registry_volume

  - name: Create volume for docker storage for all instances
    os_volume:
      verify: no
      auth: "{{ os_auth | default(omit) }}"
      state: present
      availability_zone: "{{ az }}"
      size: "{{ db_size }}"
      display_name: "{{ db_vol_name }}-{{ item }}"
    with_sequence:
      count={{ num }}

#  - name: Create volume for cns for all instances
#    os_volume:
#      verify: no
#      auth: "{{ os_auth | default(omit) }}"
#      state: present
#      availability_zone: "{{ az }}"
#      size: "{{ cns_size | default('100') }}"
#      display_name: "{{ db_vol_name }}-cns-{{ item }}"
#    with_sequence:
#      count={{ num }}

  - name: launch instances
    os_server:
      verify: no
      auth: "{{ os_auth | default(omit) }}"
      name: "{{ vm_name }}-{{ item }}.{{ domain }}"
      state: present
      key_name: "{{ key_name }}"
      availability_zone: "{{ az }}"
      nics:
        - net-name: "{{ network_name }}"
      flavor: "{{ flavor_name }}"
      image: "{{ image_uid }}"
      security_groups: "{{ security_group }}"
      auto_ip: yes
      volumes:
        - "{{ db_vol_name }}-{{ item }}"
      timeout: 300
    register: osp_host
    with_sequence:
      count={{ num }}

#  - name: add entry to dns
#    shell: "ssh root@{{ dns_server_local }} 'ipa dnsrecord-add {{ domain }} {{ item.openstack.name }} --a-rec {{ item.openstack.public_v4 }}' "
#    with_items: "{{ osp_host.results }}"
#    register: ssh_result

  - debug:
      var: ssh_result
  
  - name: wait for instances become ready to use
    wait_for:
     host: "{{ item.openstack.public_v4 }}"
     port: "22"
     timeout: "320"
     state: "started"
    with_items: "{{ osp_host.results }}"

  - name: add master server to inventory
    add_host:
      hostname: "{{ osp_host.results[0].openstack.public_v4 }}"
      ansible_ssh_user: cloud-user
      groupname: master
    when: type=='master'

  - name: add nodes to inventory
    add_host:
      hostname: "{{ item.openstack.public_v4 }}"
      ansible_ssh_user: cloud-user
      groupname: node
    with_items: "{{ osp_host.results }}"
    when: type=='node'

  - name: add nodes to inventory
    add_host:
      hostname: "{{ item.openstack.public_v4 }}"
      ansible_ssh_user: cloud-user
      groupname: infra
    with_items: "{{ osp_host.results }}"
    when: type=='infra'

  - name: Pause playbook execution for 30 seconds
    pause:
      seconds: 30
